// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnetapi.Models.Master;

#nullable disable

namespace dotnetapi.Migrations
{
    [DbContext(typeof(DBMasterContext))]
    [Migration("20230223092602_InitialModel")]
    partial class InitialModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("app.Models.Master.BlogPostCategory", b =>
                {
                    b.Property<long>("BlogPostId")
                        .HasColumnType("bigint")
                        .HasColumnName("blogpost_id ");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id ");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, created by");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, created date");

                    b.Property<long>("id")
                        .HasColumnType("bigint")
                        .HasComment("Primary Key");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit")
                        .HasComment("Flag Soft Delete");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, updated by");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, updated date");

                    b.HasKey("BlogPostId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BlogPostCategory");
                });

            modelBuilder.Entity("app.Models.Master.Category", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary Key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, created by");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, created date");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit")
                        .HasComment("Flag Soft Delete");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, updated by");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, updated date");

                    b.HasKey("id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("dotnetapi.Models.Master.Author", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary Key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email_address");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, created by");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, created date");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit")
                        .HasComment("Flag Soft Delete");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, updated by");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, updated date");

                    b.HasKey("id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("dotnetapi.Models.Master.BlogPost", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary Key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("content");

                    b.Property<string>("CoverImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("cover_image");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, created by");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, created date");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit")
                        .HasComment("Flag Soft Delete");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, updated by");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, updated date");

                    b.HasKey("id");

                    b.HasIndex("AuthorId");

                    b.ToTable("BlogPost");
                });

            modelBuilder.Entity("dotnetapi.Models.Master.BlogPostTag", b =>
                {
                    b.Property<long>("BlogPostId")
                        .HasColumnType("bigint")
                        .HasColumnName("blog_post_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("BlogPostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BlogPostTag");
                });

            modelBuilder.Entity("dotnetapi.Models.Master.Tag", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary Key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, created by");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, created date");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit")
                        .HasComment("Flag Soft Delete");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, updated by");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, updated date");

                    b.HasKey("id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("dotnetapi.Models.User.Action", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary Key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("priority");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, created by");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, created date");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit")
                        .HasComment("Flag Soft Delete");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, updated by");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, updated date");

                    b.HasKey("id");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("dotnetapi.Models.User.Company", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary Key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, created by");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, created date");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit")
                        .HasComment("Flag Soft Delete");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, updated by");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, updated date");

                    b.HasKey("id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("dotnetapi.Models.User.Department", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary Key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, created by");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, created date");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit")
                        .HasComment("Flag Soft Delete");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, updated by");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, updated date");

                    b.HasKey("id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("dotnetapi.Models.User.Role", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary Key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, created by");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, created date");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit")
                        .HasComment("Flag Soft Delete");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, updated by");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, updated date");

                    b.HasKey("id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("dotnetapi.Models.User.RoleAction", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id ");

                    b.Property<long>("ActionId")
                        .HasColumnType("bigint")
                        .HasColumnName("action_id ");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, created by");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, created date");

                    b.Property<long>("id")
                        .HasColumnType("bigint")
                        .HasComment("Primary Key");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit")
                        .HasComment("Flag Soft Delete");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, updated by");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, updated date");

                    b.HasKey("RoleId", "ActionId");

                    b.HasIndex("ActionId");

                    b.ToTable("RoleAction");
                });

            modelBuilder.Entity("dotnetapi.Models.User.Salary", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary Key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real")
                        .HasColumnName("amount");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, created by");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, created date");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit")
                        .HasComment("Flag Soft Delete");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, updated by");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, updated date");

                    b.HasKey("id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Salary");
                });

            modelBuilder.Entity("dotnetapi.Models.User.SalaryHistory", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary Key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real")
                        .HasColumnName("amount");

                    b.Property<long>("SalaryId")
                        .HasColumnType("bigint")
                        .HasColumnName("salary_id");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, created by");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, created date");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit")
                        .HasComment("Flag Soft Delete");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, updated by");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, updated date");

                    b.HasKey("id");

                    b.HasIndex("SalaryId");

                    b.ToTable("SalaryHistory");
                });

            modelBuilder.Entity("dotnetapi.Models.User.User", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary Key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_login");

                    b.Property<DateTime?>("LastLogout")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_logout");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, created by");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, created date");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit")
                        .HasComment("Flag Soft Delete");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, updated by");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, updated date");

                    b.HasKey("id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("dotnetapi.Models.User.UserCompany", b =>
                {
                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit")
                        .HasColumnName("is_main");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, created by");

                    b.Property<DateTime?>("created_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, created date");

                    b.Property<long>("id")
                        .HasColumnType("bigint")
                        .HasComment("Primary Key");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit")
                        .HasComment("Flag Soft Delete");

                    b.Property<long?>("updated_by")
                        .HasColumnType("bigint")
                        .HasComment("Audit column, updated by");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2")
                        .HasComment("Audit column, updated date");

                    b.HasKey("UserId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("UserCompany");
                });

            modelBuilder.Entity("app.Models.Master.BlogPostCategory", b =>
                {
                    b.HasOne("dotnetapi.Models.Master.BlogPost", "BlogPost")
                        .WithMany("BlogPostCategory")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Master.Category", "Category")
                        .WithMany("BlogPostCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("dotnetapi.Models.Master.BlogPost", b =>
                {
                    b.HasOne("dotnetapi.Models.Master.Author", "Author")
                        .WithMany("BlogPost")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("dotnetapi.Models.Master.BlogPostTag", b =>
                {
                    b.HasOne("dotnetapi.Models.Master.BlogPost", "BlogPost")
                        .WithMany("BlogPostTags")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetapi.Models.Master.Tag", "Tag")
                        .WithMany("BlogPostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("dotnetapi.Models.User.RoleAction", b =>
                {
                    b.HasOne("dotnetapi.Models.User.Action", "Action")
                        .WithMany("RoleAction")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetapi.Models.User.Role", "Role")
                        .WithMany("RoleActions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("dotnetapi.Models.User.Salary", b =>
                {
                    b.HasOne("dotnetapi.Models.User.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetapi.Models.User.User", "User")
                        .WithMany("Salary")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotnetapi.Models.User.SalaryHistory", b =>
                {
                    b.HasOne("dotnetapi.Models.User.Salary", "Salary")
                        .WithMany("SalaryHistory")
                        .HasForeignKey("SalaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salary");
                });

            modelBuilder.Entity("dotnetapi.Models.User.User", b =>
                {
                    b.HasOne("dotnetapi.Models.User.Department", "Department")
                        .WithMany("User")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetapi.Models.User.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("dotnetapi.Models.User.UserCompany", b =>
                {
                    b.HasOne("dotnetapi.Models.User.Company", "Company")
                        .WithMany("UserCompany")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetapi.Models.User.User", "User")
                        .WithMany("UserCompany")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("app.Models.Master.Category", b =>
                {
                    b.Navigation("BlogPostCategory");
                });

            modelBuilder.Entity("dotnetapi.Models.Master.Author", b =>
                {
                    b.Navigation("BlogPost");
                });

            modelBuilder.Entity("dotnetapi.Models.Master.BlogPost", b =>
                {
                    b.Navigation("BlogPostCategory");

                    b.Navigation("BlogPostTags");
                });

            modelBuilder.Entity("dotnetapi.Models.Master.Tag", b =>
                {
                    b.Navigation("BlogPostTags");
                });

            modelBuilder.Entity("dotnetapi.Models.User.Action", b =>
                {
                    b.Navigation("RoleAction");
                });

            modelBuilder.Entity("dotnetapi.Models.User.Company", b =>
                {
                    b.Navigation("UserCompany");
                });

            modelBuilder.Entity("dotnetapi.Models.User.Department", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("dotnetapi.Models.User.Role", b =>
                {
                    b.Navigation("RoleActions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("dotnetapi.Models.User.Salary", b =>
                {
                    b.Navigation("SalaryHistory");
                });

            modelBuilder.Entity("dotnetapi.Models.User.User", b =>
                {
                    b.Navigation("Salary");

                    b.Navigation("UserCompany");
                });
#pragma warning restore 612, 618
        }
    }
}
